'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _phantomjsPrebuilt = require('phantomjs-prebuilt');

var _phantomjsPrebuilt2 = _interopRequireDefault(_phantomjsPrebuilt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var highchartsjs = _path2.default.join(__dirname, '../scripts/highcharts-convert.js');
var binPath = _phantomjsPrebuilt2.default.path;

var HighchartsServer = function (_events$EventEmitter) {
    _inherits(HighchartsServer, _events$EventEmitter);

    function HighchartsServer() {
        var port = arguments.length <= 0 || arguments[0] === undefined ? 3001 : arguments[0];
        var phantomjsTimeout = arguments.length <= 1 || arguments[1] === undefined ? 60000 : arguments[1];
        var sleepTime = arguments.length <= 2 || arguments[2] === undefined ? 300000 : arguments[2];

        _classCallCheck(this, HighchartsServer);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(HighchartsServer).call(this));

        _this.port = port;
        _this.args = [highchartsjs, '-host', '127.0.0.1', '-port', port];
        _this.ready = true;
        _this.phantomProcess = null;
        _this.starting = false;
        _this.phantomjsTimeout = phantomjsTimeout;
        _this.sleepTime = sleepTime;
        _this.queue = [];
        _this.processing = 0;

        process.on('exit', function () {
            // cleanup highcharts process
            _this.stop();
        });
        return _this;
    }

    _createClass(HighchartsServer, [{
        key: 'start',
        value: function start() {
            var _this2 = this;

            this.starting = true;
            this.phantomProcess = _child_process2.default.execFile(binPath, this.args);
            this.phantomProcess.on('exit', function () {
                _this2.phantomProcess = null;
            });
            setTimeout(function () {
                _this2.ready = true;
                _this2.starting = false;
                _this2.emit('started');
                _this2.resetSleepTimer();
                while (_this2.queue.length > 0) {
                    _this2.serve(_this2.queue.shift());
                }
            }, 4000);
        }
    }, {
        key: 'stop',
        value: function stop(clearQueue) {
            var _this3 = this;

            if (this.phantomProcess) {
                this.phantomProcess.kill('SIGKILL');
                this.phantomProcess = null;
                if (clearQueue) {
                    this.queue = [];
                }
                this.processing = 0;
                setTimeout(function () {
                    _this3.emit('stopped');
                }, 2000);
            } else {
                this.emit('stopped');
            }
        }
    }, {
        key: 'serve',
        value: function serve(obj) {
            var _this4 = this;

            var defaults = {
                infile: JSON.stringify(obj.chartOptions),
                constr: 'Chart'
            };
            var postdata = JSON.stringify(_lodash2.default.extend(defaults, obj.renderOptions));
            if (!this.ready) {
                this.queue.push(obj);
                return;
            } else {
                this.processing++;
            }

            _request2.default.post('http://localhost:' + this.port + '/', {
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': Buffer.byteLength(postdata, 'utf8')
                },
                body: postdata,
                timeout: this.phantomjsTimeout
            }, function (err, r, body) {
                if (err) {
                    _this4.processing--;
                    _this4.queue.push(obj);
                    if (err.code === 'ECONNREFUSED') {
                        // no server running currently, start one
                        _this4.ready = false;
                        if (!_this4.starting) {
                            _this4.start();
                        }
                    } else if (err.code === 'ETIMEDOUT' || err.code === 'ESOCKETTIMEDOUT') {
                        // phantomjs occasionally goes into a zombie state where
                        // it's still running and will accept a connection/request
                        // but never responds to the request
                        _this4.emit('timeout');
                        _this4.once('stopped', function () {
                            _this4.start();
                        });
                        _this4.stop();
                    } else {
                        console.error(err);
                    }
                    return;
                } else {
                    obj.callback(body);
                    _this4.processing--;
                    _this4.resetSleepTimer();
                }
            });
        }
    }, {
        key: 'stopSleepTimer',
        value: function stopSleepTimer() {
            if (this.sleepTime && this.sleepTimer) {
                clearTimeout(this.sleepTimer);
            }
        }
    }, {
        key: 'resetSleepTimer',
        value: function resetSleepTimer() {
            var _this5 = this;

            this.stopSleepTimer();
            this.sleepTimer = setTimeout(function () {
                if (_this5.queue.length === 0 && _this5.processing === 0) {
                    // if there is nothing in the queue and nothing
                    // currently processing, stop phantomjs
                    _this5.stop();
                } else {
                    // otherwise wait and check again (default 5 minutes)
                    _this5.resetSleepTimer();
                }
            }, this.sleepTime);
        }
    }, {
        key: 'render',
        value: function render(renderOptions, chartOptions, callback) {
            var obj = {
                renderOptions: renderOptions,
                chartOptions: chartOptions,
                callback: callback
            };

            if (this.ready) {
                this.serve(obj);
            } else {
                this.queue.push(obj);
            }
        }
    }]);

    return HighchartsServer;
}(_events2.default.EventEmitter);

exports.default = HighchartsServer;